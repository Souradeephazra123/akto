//create a testing for API authentication
// Date: 03/10/2019
// Author: Souradeep Hazra
// Description: This is a test for API authentication
// Usage: node newcode.js
// Dependencies:
// Notes:
// Revisions:
// ================================================
// ================================================
// Include our packages in our main server file
// ================================================
// ================================================
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var jwt = require('jsonwebtoken');
var config = require('./config');
var User = require('./app/models/user');
// ================================================
// ================================================
// Configure app for bodyParser()
// lets us grab data from the body of POST
// ================================================
// ================================================
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
// ================================================
// ================================================
// Set up port for server to listen on
// ================================================
// ================================================
var port = process.env.PORT || 3000;
// ================================================
// ================================================
// Connect to DB
// ================================================
// ================================================
mongoose.connect(config.database);
// ================================================
// ================================================
// API Routes
// ================================================
// ================================================

// Basic route for homepage
app.get('/', function(req, res) {
  res.send('Welcome to the home page!');
});
// Route to authenticate users (POST http://localhost:8080/api/authenticate)
app.post('/api/authenticate', function(req, res) {
  // find the user
  User.findOne(
    {
      name: req.body.name
    },
    function(err, user) {
      if (err) throw err;
      if (!user) {
        res.json({ success: false, message: 'Authentication failed. User not found.' });
      } else if (user) {
        // check if password matches
        if (user.password != req.body.password) {
          res.json({ success: false, message: 'Authentication failed. Wrong password.' });
        } else {
          // if user is found and password is right
          // create a token
          var token = jwt.sign(user, config.secret, {
            expiresIn: 86400 // expires in 24 hours
          });
          // return the information including token as JSON
          res.json({
            success: true,
            message: 'Enjoy your token!',
            token: token
          });
        }
      }
    }
  );
});
// Route middleware to verify a token
app.use(function(req, res, next) {
  // check header or url parameters or post parameters for token
  var token =
    req.body.token || req.query.token || req.headers['x-access-token'];
  // decode token
  if (token) {
    // verifies secret and checks exp
    jwt.verify(token, config.secret, function(err, decoded) {
      if (err) {
        return res.json({
          success: false,
          message: 'Failed to authenticate token.'
        });
      } else {
        // if everything is good, save to request for use in other routes
        req.decoded = decoded; next();
      }
    });
  } else {
    // if there is no token
    // return an error
    return res.status(403).send({
      success: false,
      message: 'No token provided.'
    });
  }
});
// API ROUTES -------------------
// we'll get to these in a second
// get an instance of the router for api routes
var apiRoutes = express.Router();
// route to show a random message (GET http://localhost:8080/api/)
apiRoutes.get('/', function(req, res) {
  res.json({ message: 'Welcome to the coolest API on earth!' });
});
// route to return all users (GET http://localhost:8080/api/users)
apiRoutes.get('/users', function(req, res) {
  User.find({}, function(err, users) {
    res.json(users);
  });
});
// apply the routes to our application with the prefix /api
app.use('/api', apiRoutes);
// ================================================
// ================================================
// Start the server
// ================================================
// ================================================
app.listen(port);
console.log('Server running on port ' + port);
